// <auto-generated />
using System;
using FlashCards.Api.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlashCards.Api.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220911163530_AddNotificationAndDenunciationTable")]
    partial class AddNotificationAndDenunciationTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FlashCards.Api.Core.Accounts.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("password");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("pk_account_id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("FlashCards.Api.Core.Categories.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.HasKey("ID")
                        .HasName("pk_category_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("FlashCards.Api.Core.Denunciations.Denunciation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("denunciation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AccuserID")
                        .HasColumnType("int")
                        .HasColumnName("accuser_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("SuspectID")
                        .HasColumnType("int")
                        .HasColumnName("suspect_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.HasKey("ID")
                        .HasName("pk_denunciation_id");

                    b.HasIndex("AccuserID");

                    b.HasIndex("SuspectID");

                    b.ToTable("denunciations", (string)null);
                });

            modelBuilder.Entity("FlashCards.Api.Core.Notifications.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("message");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("notification_date");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime")
                        .HasColumnName("read_date");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("sent_date");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<int>("UserID")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ID")
                        .HasName("pk_notification_id");

                    b.HasIndex("UserID");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("FlashCards.Api.Core.Users.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AccountID")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Instagram")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("instagram");

                    b.Property<string>("Interests")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("interests");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("name");

                    b.HasKey("ID")
                        .HasName("pk_user_id");

                    b.HasIndex("AccountID")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FlashCards.Api.Core.Users.UserRelationship", b =>
                {
                    b.Property<int>("FollowedID")
                        .HasColumnType("int")
                        .HasColumnName("followed_id");

                    b.Property<int>("FollowerID")
                        .HasColumnType("int")
                        .HasColumnName("follower_id");

                    b.Property<bool>("EnableNotification")
                        .HasColumnType("bit")
                        .HasColumnName("enable_notification");

                    b.HasKey("FollowedID", "FollowerID")
                        .HasName("pk_user_relationship");

                    b.HasIndex("FollowerID");

                    b.ToTable("user_relationships", (string)null);
                });

            modelBuilder.Entity("FlashCards.Api.Core.Denunciations.Denunciation", b =>
                {
                    b.HasOne("FlashCards.Api.Core.Users.User", "Accuser")
                        .WithMany()
                        .HasForeignKey("AccuserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlashCards.Api.Core.Users.User", "Suspect")
                        .WithMany()
                        .HasForeignKey("SuspectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accuser");

                    b.Navigation("Suspect");
                });

            modelBuilder.Entity("FlashCards.Api.Core.Notifications.Notification", b =>
                {
                    b.HasOne("FlashCards.Api.Core.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashCards.Api.Core.Users.User", b =>
                {
                    b.HasOne("FlashCards.Api.Core.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("FlashCards.Api.Core.Users.User", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("FlashCards.Api.Core.Users.UserRelationship", b =>
                {
                    b.HasOne("FlashCards.Api.Core.Users.User", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlashCards.Api.Core.Users.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("FlashCards.Api.Core.Users.User", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Following");
                });
#pragma warning restore 612, 618
        }
    }
}
